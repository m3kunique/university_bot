import logging
import fake_useragent
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
import math
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from requests import get, Session
import config
from bs4 import BeautifulSoup as bs
from datetime import date as d
from datetime import timedelta
import sqlite3
import traceback

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.token, parse_mode='html')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

l_sub_status = {0: "‚õî Not active",
                1: "‚úÖ Active!"}

l_user_status = {0: "‚õî –ë–∞–Ω",
                 1: "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç",
                 2: "üòé –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
                 3: "üíÉ –°—Ç–∞—Ä–æ—Å—Ç–∞",
                 4: "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
                 5: "üßë‚Äçüíª –†–∞–∑—Ä–∞–±",
                 6: "ü§¥ –ë–æ–≥", }

l_kniga_emoji = {0: "üìï",
                 1: "üìí",
                 2: "üìó",
                 3: "üìò",
                 4: "üìô",
                 5: "üìî"}


class Form(StatesGroup):
    s_username = State()
    s_password = State()
    s_add_user = State()
    s_add_user_2 = State()
    s_add_user_3 = State()
    s_add_user_4 = State()
    s_add_user_5 = State()
    s_add_user_6 = State()
    s_add_user_true = State()
    s_starosta_announcement = State()
    s_starosta_poll = State()
    s_starosta_poll_1 = State()
    s_starosta_poll_2 = State()
    s_add_homework_1 = State()
    s_starosta_note_1 = State()
    s_starosta_note_2 = State()
    s_starosta_note_3 = State()


class Poll(StatesGroup):
    poll_1 = State()
    poll_2 = State()
    poll_3 = State()
    poll_4 = State()
    poll_5 = State()
    poll_6 = State()
    poll_7 = State()
    poll_8 = State()
    poll_9 = State()
    poll_10 = State()
    poll_finish = State()


async def f_user_delete_true(user_id):
    key_del = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
    b_ = InlineKeyboardButton('‚¨á‚¨á‚¨á  –í—ã —É–≤–µ—Ä–µ–Ω—ã?  ‚¨á‚¨á‚¨á', callback_data='pass')
    b_true = InlineKeyboardButton('üöÆ –î–ê üöÆ', callback_data='c_user_delete_true 1')
    b_false = InlineKeyboardButton('‚õ© –ù–ï–¢ ‚õ©', callback_data='c_user_delete_true 2')
    key_del.add(b_)
    key_del.add(b_true,b_false)
    await bot.send_message(user_id, '–í–´ –£–í–ï–†–ï–ù–´???', reply_markup=key_del)



async def f_delete_this_message(message):
    await bot.delete_message(message.chat.id, message.message_id)


async def get_user_status(user_id):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    user_status = cursor.execute(f"SELECT status FROM users WHERE user_id ='{user_id}'").fetchone()[0]
    conn.close()
    return user_status


async def f_user_verify(user_id, username, message):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))  # –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏
    rez = cursor.fetchall()  # –ø—Ä–∏–≤–æ–¥ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥ –∑–∞–ø–∏—Å–µ–π
    if not rez:  # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ
        await bot.send_message(user_id, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞')
        await Form.s_username.set()
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: " + str(username) + " || " + str(user_id))
        old_user_name = cursor.execute("SELECT username FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
        fresh_user_name = username
        if old_user_name != fresh_user_name:
            await bot.send_message(config.archive_chat_id, f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Å–º–µ–Ω–∏–ª —é–∑–µ—Ä–Ω–µ–π–º!"
                                                           f"\n‚ö†Ô∏è –ë—ã–ª @{old_user_name} —Å—Ç–∞–ª @{fresh_user_name}")
            cursor.execute('UPDATE users SET username = ? WHERE user_id = ?', (fresh_user_name, user_id))
            conn.commit()
        user_status = cursor.execute("SELECT status FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
        if user_status == 0:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω ‚õîÔ∏è!")
        else:
            if message == '/start':
                await start_message_1(user_id)
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω ‚úÖÔ∏è!")
            return user_status
    conn.close()


@dp.message_handler(state=Form.s_username)
async def f_username(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text
    await Form.next()
    await bot.send_message(message.from_user.id, f"<b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</b>")


@dp.message_handler(state=Form.s_password)
async def f_password(message: Message, state: FSMContext):
    async with state.proxy() as datas:
        ans = await bot.send_message(chat_id=message.chat.id, text='–ó–∞–≥—Ä—É–∑–∫–∞...')
        datas['password'] = message.text
        url = 'https://lks.bmstu.ru/portal3/login?back=https://lks.bmstu.ru/portfolio'
        data = {
            'username': datas['username'],
            'password': datas['password'],
            '_eventId': 'submit'
        }
        s = Session()
        r = s.get(url)
        execution = r.text.split('<input type="hidden" name="execution" value="')[1].split('"/>')[0]
        data["execution"] = execution
        url = 'https://proxy.bmstu.ru:8443/cas/login?service=https%3A%2F%2Fproxy.bmstu.ru%3A8443%2Fcas%2Foauth2.0%2FcallbackAuthorize%3Fclient_name%3DCasOAuthClient%26client_id%3DEU'
        fake_user = fake_useragent.UserAgent().chrome
        headers = {
            'user-agent': fake_user
        }
        a = s.post(url, data=data, headers=headers)
        r = bs(a.text, 'lxml')
        try:
            name = [i for i in r.find(class_='card-title').text.split(' ') if i != '']
            name = [line.rstrip() for line in name]
            name = f'{name[0]} {name[1]} {name[2]}'
            info = r.find_all(class_='card-subtitle')
            DOB = info[1].text
            # education_level = info[2].text
            course = info[3].text
            conn = sqlite3.connect('db.db', check_same_thread=False)
            cursor = conn.cursor()
            user_id = message.from_user.id
            username = message.from_user.username
            rez = cursor.execute(f'SELECT user_id FROM users WHERE FIO=?', (name,)).fetchone()[0]
            username_1 = cursor.execute(f'SELECT username FROM users WHERE FIO=?', (name,)).fetchone()[0]
            if rez:
                cursor.execute(f'''UPDATE users SET user_id = ('{rez} {user_id}') WHERE FIO=?''', (name,))
                cursor.execute(f'''UPDATE users SET username = ('{username_1} {username}') WHERE FIO=?''', (name,))
            else:
                cursor.execute(
                    'INSERT INTO users (user_id, username, FIO, DOB, course, sub, sub_date, status, login, password) '
                    'VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                    (user_id, username, name, DOB, course,
                     0, None, 1, datas['username'], datas['password']))
            await bot.edit_message_text(text='üèÖ  –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã  üèÖ', message_id=ans.message_id,
                                        chat_id=message.chat.id)
            conn.commit()
            conn.close()
            await state.reset_data()
            await state.finish()
            await start_message_1(user_id)
        except Exception as E:
            print(traceback.print_exc())
            await bot.send_message(config.archive_chat_id,
                                   f'—É –≤–∞—Å –æ—à–∏–±–∫–∞ –±–ª—è—Ç—å *{E}* –≤–æ—Ç —Ç–∞–∫–∞—è, –∏–¥–∏ –∏—Å–ø—Ä–∞–≤–ª—è–π —Å—É–∫–∞ —Ç–≤–∞—Ä—å –ø–∞–¥–ª–∞ –º—Ä–∞–∑—å')
            await bot.send_message(message.chat.id,
                                   '–¢—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å\n\n'
                                   '–ï—Å–ª–∏ —Ç–∞–∫–∞—è —Ö—Ä–µ–Ω—å –Ω–∞–ø–∏—Å–∞–ª–∞—Å—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, '
                                   '—Ç–æ –±–ª—è, –Ω–µ –ø–æ–ª–µ–Ω–∏—Å—å –∏ —Å–∫–∏–Ω—å <a href="https://t.me/bmstu_support">–º–Ω–µ</a> —á–µ —Ç—ã –≤–≤–µ–ª',
                                   disable_web_page_preview=True)
            await state.reset_data()
            await state.finish()
            await f_user_verify(message.from_user.id, message.from_user.username, '/start')


@dp.message_handler(commands=['getmyid'])
async def getmyidbroshka(message):
    await message.answer(f"–¢–≤–æ–π –∞–π–¥–∏: {message.from_user.id}")


@dp.message_handler(commands=['start'])
async def start_message(message: Message):
    username = message.from_user.username
    user_id = message.from_user.id
    await f_user_verify(user_id, username, '/start')


async def start_message_1(user_id):
    user_status = await get_user_status(user_id)
    key_main = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
    b_timetable = InlineKeyboardButton('üóì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='c_main timetable')
    b_homework = InlineKeyboardButton('üìÉ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='c_main homework')
    b_starosta = InlineKeyboardButton('üë®‚Äçüè´ –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã', callback_data='c_main starosta')
    b_admin = InlineKeyboardButton('ü§ñ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='c_main admin')
    b_account = InlineKeyboardButton('‚öô –ê–∫–∫–∞—É–Ω—Ç', callback_data='c_main account')
    key_main.add(b_timetable, b_homework)
    key_main.add(b_account)
    if user_status > 4:
        key_main.add(b_admin, b_starosta)
        await bot.send_message(user_id, " üåç   ‚Äî‚Äî‚Äî <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b> ‚Äî‚Äî‚Äî   üåç ", reply_markup=key_main)
    elif user_status > 1:
        key_main.add(b_starosta)
        await bot.send_message(user_id, " üåç   ‚Äî‚Äî‚Äî <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b> ‚Äî‚Äî‚Äî   üåç ", reply_markup=key_main)
    elif user_status > 0:
        await bot.send_message(user_id, " üåç   ‚Äî‚Äî‚Äî <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b> ‚Äî‚Äî‚Äî   üåç ", reply_markup=key_main)
    else:
        await bot.send_message(user_id, f'‚õîÔ∏è <b>–í–´ –ó–ê–ë–ê–ù–ï–ù–´</b>'
                                        f'\n\n   –ù—É –∞ –µ—Å–ª–∏ –≤—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ –≥—Ä—É–ø–ø—ã')


async def f_timetable_page(user_id):
    user_status = await get_user_status(user_id)
    if user_status > 0:
        conn = sqlite3.connect('db.db', check_same_thread=False)
        cursor = conn.cursor()
        course = cursor.execute(f"SELECT course FROM users WHERE user_id='{user_id}'").fetchone()[0]
        key_timetable = InlineKeyboardMarkup(resize_keyboard=True, selective=True)  # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        b_back = InlineKeyboardButton('üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'c_back_to_menu')
        b_timetable_today = InlineKeyboardButton('üü† –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data=f'c_timetable_now {1} {course}')
        b_timetable_tomorrow = InlineKeyboardButton('üü¢ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data=f'c_timetable_now {2} {course}')
        b_timetable_week = InlineKeyboardButton('üü£ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data=f'c_timetable_now {3} {course}')
        if d.isoweekday(d.today()) == 7:
            key_timetable.row(b_timetable_tomorrow, b_timetable_week)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        else:
            key_timetable.row(b_timetable_today, b_timetable_tomorrow)
            key_timetable.row(b_timetable_week)
        key_timetable.add(b_back)
        await bot.send_message(user_id, f'üìÜ   ‚Äî‚Äî‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî‚Äî‚Äî   üìÜ', reply_markup=key_timetable)
        conn.close()


async def f_account_page(user_id, username):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    user_status = await get_user_status(user_id)
    if user_status > 0:
        cursor.execute(f"SELECT * FROM users WHERE user_id='{user_id}'")
        info = cursor.fetchone()
        FIO = info[3]
        course = info[5]
        sub = info[6]
        sub_date = info[7]
        rez = cursor.execute("SELECT course FROM courses WHERE course=?", (course,)).fetchall()
        if not rez:
            cursor.execute(f'''INSERT INTO courses (course) VALUES ('{course}')''')
            conn.commit()
        key_start_message = InlineKeyboardMarkup(resize_keyboard=True, selective=True)  # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        b_back = InlineKeyboardButton('üè°Ô∏èÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='c_back_to_menu')
        b_setting = InlineKeyboardButton('‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–µ –≤–æ—Ä–∫)', callback_data='c_user_setting')
        b_delete = InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='c_user_delete')
        key_start_message.add(b_setting, b_delete)
        key_start_message.add(b_back)
        if user_status != 0:
            await bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {username}"
                                            f"\n\n–ü–æ–¥–ø–∏—Å–∫–∞: <b>{l_sub_status.get(sub)}</b>"
                                            f"\n–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{sub_date}</b>"
                                            f"\n-----------------"
                                            f"\nüíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ üíé"
                                            f"\n<b>üÜî ID:</b> <code>{user_id}</code>"
                                            f"\n<b>üìù –§–ò–û:</b> <code>{FIO}</code>"
                                            f"\n<b>üë• –ö—É—Ä—Å:</b> <code>{course}</code>"
                                            f"\n<b>üß† –°—Ç–∞—Ç—É—Å:</b> <code>{l_user_status.get(user_status)}</code>",
                                   reply_markup=key_start_message)
        else:
            await bot.send_message(user_id, "‚õîÔ∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>")
        conn.close()


@dp.message_handler(commands=['f'])
async def test(message):
    await message.answer(f"–°–µ–≥–æ–¥–Ω—è: {d.today()}\n"
                         f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {d.isoweekday(d.today())}")


# todo
# –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –∫–Ω–æ–ø–∫–∞ —Å –¥–∑
# –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –±–¥ –∏ –∫–Ω–æ–ø–∫–∞ —Å –¥–∑
async def f_timetable_week(user_id, course, week_count):  # –ø–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
    url = 'https://lks.bmstu.ru/schedule/list'
    b = bs(get(url).text, 'lxml').find_all('a', class_="btn btn-primary col-1 rounded schedule-indent")
    status = 0
    for i in b:
        if i.get_text(strip=True) == course:
            status = 1
            url = 'https://lks.bmstu.ru/' + i.get('href')
            b = bs(get(url).text, 'lxml').find_all('div', class_='col-lg-6 d-none d-md-block')
            string_build = "\n"
            for l, n in enumerate(b, start=1):
                if l >= 2:
                    string_build += f'‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n'
                string_build += f'''üóì    {n.find('strong').text}    üóì\n\n\n'''
                y = n.find_all('tr')
                for i, j in enumerate(y, start=1):
                    if i >= 3:
                        a = j.find('span')
                        if (a is not None) and (week_count == 0):  # —á–∏–ª—Å–∏—Ç–µ–ª—å
                            if (a.find_parent('td', class_='text-info-bold')) or (a.find_parent('td', colspan='2')):
                                string_build += f"""üï∞  {j.find('td', class_='bg-grey text-nowrap').text}\n{a.text}\n\n"""
                        elif (a is not None) and (week_count == 1):  # –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
                            if (a.find_parent('td', class_='text-primary')) or (a.find_parent('td', colspan='2')):
                                string_build += f"""üï∞  {j.find('td', class_='bg-grey text-nowrap').text}\n{a.text}\n\n"""
            key_menu = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
            b_back = InlineKeyboardButton('üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'c_back_to_menu')
            key_menu.add(b_back)
            await bot.send_message(user_id, f"{string_build}", reply_markup=key_menu)
            break

    if status == 0:
        await bot.send_message(user_id,
                               '\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <a href="https://t.me/bmstu_support">—Å–æ–∑–¥–∞—Ç–µ–ª—é</a> —ç—Ç–æ–≥–æ —Å–ª–∞–±–æ–≥–æ'
                               ' –±–æ—Ç–∞', disable_web_page_preview=True)


async def f_homework_panel_main_0(user_id, username):
    user_status = await f_user_verify(user_id, username, ' ')
    if user_status > 0:
        await f_homework_panel_main(user_id, user_status)
    else:
        await bot.send_message(user_id, text='–í–´ –ó–ê–ë–ê–ù–ï–ù–´')


async def f_homework_panel_main(user_id, user_status):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute(f"SELECT course FROM users WHERE user_id='{user_id}'")  # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
    course = cursor.fetchone()[0]
    homework_kol = cursor.execute("SELECT COUNT(*) FROM homework WHERE course=?", (course,)).fetchone()[0]
    key_homework_panel = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
    b_show_homework = InlineKeyboardButton('üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='c_show_homework')
    b_back = InlineKeyboardButton('üè°Ô∏èÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='c_back_to_menu')
    if user_status > 1:
        b_add_homework = InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data='c_add_homework')
        b_edit_homework = InlineKeyboardButton('‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ', callback_data='c_show_homework')
        key_homework_panel.add(b_add_homework, b_edit_homework)
    key_homework_panel.add(b_show_homework)
    key_homework_panel.add(b_back)
    await bot.send_message(user_id, "üìîÔ∏è   ‚Äî‚Äî‚Äî <b>–ü–ê–ù–ï–õ–¨ –î–û–ú–ê–®–ö–ò</b> ‚Äî‚Äî‚Äî   üìîÔ∏è" +
                           f"\n–î–æ–º–∞—à–∫–∏ –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ: {str(homework_kol)}", reply_markup=key_homework_panel)
    conn.close()


async def f_pagination(user_id, current_page, message_id):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT course FROM users WHERE user_id='{user_id}'")  # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
    course = cursor.fetchone()[0]
    cursor.execute("SELECT class FROM homework WHERE course=?", (course,))  # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    names_all = cursor.fetchall()
    names = []
    for i in names_all:
        if i[0] not in names:
            names.append(i[0])
    keybord = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
    keybord.row_width = 3
    spisok = {j: InlineKeyboardButton(f'{i}', callback_data=f'c_reference {i}') for j, i in enumerate(names, start=0)}
    full_length = len(spisok)
    last_page = math.ceil(full_length / 6)
    length = full_length - current_page * 6
    pass_ = InlineKeyboardButton(' ', callback_data='pass')
    back = InlineKeyboardButton('‚¨Ö', callback_data=f'c_pagination back {current_page}')
    page = InlineKeyboardButton(f'{current_page}/{last_page}', callback_data='pass')
    next = InlineKeyboardButton('‚û°', callback_data=f'c_pagination next {current_page}')
    if current_page == 1:
        for i in range(6, full_length):
            del spisok[i]
        keybord.add(*spisok.values())
        keybord.add(pass_, page, next)
    elif current_page == last_page:
        if full_length % 6 == 0:
            length = full_length - 6
        else:
            length = full_length - full_length // 6
        for i in range(0, length):
            spisok.pop(i)
        keybord.add(*spisok.values())
        keybord.add(back, page, pass_)
    else:
        for i in range(0, length):
            spisok.pop(i)
        for i in range(length + 6, full_length):
            spisok.pop(i)
        keybord.add(*spisok.values())
        keybord.add(back, page, next)

    await bot.edit_message_text(chat_id=user_id, message_id=message_id,
                                text='–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=keybord)
    conn.close()


async def f_homework_page(user_id):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT course FROM users WHERE user_id='{user_id}'")
    course = cursor.fetchone()[0]
    cursor.execute("SELECT class FROM homework WHERE course=?", (course,))  # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    names_all = cursor.fetchall()
    names = []
    for i in names_all:
        if i[0] not in names:
            names.append(i[0])
    keybord = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
    keybord.row_width = 3
    spisok = {j: InlineKeyboardButton(f'{i}', callback_data=f'c_reference {i}') for j, i in enumerate(names, start=0)}
    length = len(spisok)
    pass_ = InlineKeyboardButton(' ', callback_data='pass')
    page = InlineKeyboardButton(f'1/{math.ceil(length / 6)}', callback_data='pass')
    next = InlineKeyboardButton('‚û°', callback_data=f'c_reference next {length}')
    if length <= 6:
        keybord.add(*spisok.values())
    else:
        length = length - length % 6
        for i in range(6, length - 1, -1):
            spisok.pop(i)
        keybord.add(*spisok.values())
        keybord.add(pass_, page, next)

    await bot.send_message(chat_id=user_id, text='–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=keybord)
    conn.close()


async def f_homework_show(homework, user_id):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute(f"SELECT status FROM users WHERE user_id='{user_id}'")
    user_status = cursor.fetchone()[0]
    cursor.execute(f"SELECT course FROM users WHERE user_id='{user_id}'")  # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
    course = cursor.fetchone()[0]
    cursor.execute(
        f"SELECT text FROM homework WHERE (course LIKE '%{course}%') AND (class LIKE '%{homework}%')  ")  # —Ç–µ–∫—Å—Ç –¥–∑
    text_all = cursor.fetchall()
    date_of_creation = cursor.execute(
        f"SELECT date_of_creation FROM homework WHERE (course LIKE '%{course}%') AND (class LIKE '%{homework}%')").fetchone()
    for i in range(len(text_all)):
        id_of_homework = cursor.execute(
            f"SELECT id FROM homework WHERE (course LIKE '%{course}%') AND (text LIKE '%{text_all[i][0]}%')").fetchone()
        if user_status > 1:
            await bot.send_message(user_id,
                                   text=f'\n\n –ó–∞–¥–∞–Ω–∏–µ –ø–æ {homework} –æ—Ç {date_of_creation[0]}\n\n{text_all[i][0]}',
                                   reply_markup=InlineKeyboardMarkup(resize_keyboard=True, selective=True).add(
                                       InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                                            callback_data=f'c_edit_homework_1 {id_of_homework[0]}')))
        elif user_status == 1:
            await bot.send_message(user_id,
                                   text=f'\n\n –ó–∞–¥–∞–Ω–∏–µ –ø–æ {homework} –æ—Ç {date_of_creation[0]}\n\n{text_all[i][0]}',
                                   reply_markup=InlineKeyboardMarkup(resize_keyboard=True, selective=True).add(
                                       InlineKeyboardButton))
    #     todo
    # —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–∏—á–Ω–æ –¥–ª—è —Å–µ–±—è –æ—Ç–º–µ—á–∞—Ç—å —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –¥–∑ (—ç—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É id –¥–∑)
    # —É –¥–∑ —Å–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –±–¥, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∫—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª —ç—Ç–æ –¥–∑, –∏ —Ç–∏–ø–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    #  –±—É–¥–µ—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ, —Ç–æ –≤—Å–µ —á–∏—Å—Ç–∏—Ç—å –∏ –¥–∑, –∏ id
    conn.close()


async def f_homework_edit_1(id_of_homework, user_id):  # todo
    await bot.send_message(user_id, f'{id_of_homework[0]}')


@dp.message_handler(state='s_add_homework_1')  # todo –Ω–∞–¥–æ –¥–æ–¥–µ–ª–∞—Ç—å
async def homework_step_1(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['class'] = message.text


async def f_timetable_today(user_id, course, today, week_count):
    day = d.isoweekday(today)
    url = 'https://lks.bmstu.ru/schedule/list'
    b = bs(get(url).text, 'lxml').find_all('a', class_="btn btn-primary col-1 rounded schedule-indent")
    status = 0
    for i in b:
        if i.get_text(strip=True) == course:
            status = 1
            url = 'https://lks.bmstu.ru/' + i.get('href')
            match day:
                case 1:
                    day = '–ü–ù'
                case 2:
                    day = '–í–¢'
                case 3:
                    day = '–°–†'
                case 4:
                    day = '–ß–¢'
                case 5:
                    day = '–ü–¢'
                case 6:
                    day = '–°–ë'
                case 7:
                    break
            b = bs(get(url).text, 'lxml').find(string=day).find_parent('table').find_all('tr')
            string_build = f"üóì    {day}    üóì\n\n"
            for i, j in enumerate(b, start=1):
                if i >= 3:
                    a = j.find('span')
                    if (a is not None) and (week_count == 0):  # —á–∏—Å–ª–∏—Ç–µ–ª—å
                        if (a.find_parent('td', class_='text-info-bold')) or (a.find_parent('td', colspan='2')):
                            string_build += f"""üï∞  {j.find('td', class_='bg-grey text-nowrap').text}\n{a.text}\n\n"""
                    elif (a is not None) and (week_count == 1):  # –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å
                        if (a.find_parent('td', class_='text-primary')) or (a.find_parent('td', colspan='2')):
                            string_build += f"""üï∞  {j.find('td', class_='bg-grey text-nowrap').text}\n{a.text}\n\n"""
            key_menu = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
            b_back = InlineKeyboardButton('üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'c_back_to_menu')
            key_menu.add(b_back)
            await bot.send_message(user_id, f"{string_build}", reply_markup=key_menu)
            break
    if status == 0:
        await bot.send_message(user_id, '–≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã')


async def f_admin_panel_main(user_id, username):
    user_status = await f_user_verify(user_id, username, ' ')
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    user_kol = cursor.execute("SELECT COUNT(*) FROM users").fetchone()[0]
    key_admin_panel = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
    b_search_user = InlineKeyboardButton('üîé –ü–æ–∏—Å–∫ —é–∑–µ—Ä–æ–≤', callback_data='c_search_users')
    b_add_user = InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞', callback_data='c_add_user')
    b_back = InlineKeyboardButton('üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'c_back_to_menu')
    key_admin_panel.add(b_search_user)
    key_admin_panel.add(b_add_user)
    key_admin_panel.add(b_back)
    if user_status >= 5:
        await bot.send_message(user_id, "‚öú   ‚Äî‚Äî‚Äî <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê</b> ‚Äî‚Äî‚Äî   ‚öúÔ∏è" +
                               f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {str(user_kol)}", reply_markup=key_admin_panel)
    conn.close()


@dp.message_handler(state=Form.s_add_user)
async def f_add_user(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_id'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
    await Form.next()


@dp.message_handler(state=Form.s_add_user_2)
async def f_add_user_2(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_FIO'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å (–≥—Ä—É–ø–ø—É (–ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ))")
    await Form.next()


@dp.message_handler(state=Form.s_add_user_3)
async def f_add_user_3(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_course'] = message.text.upper()
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞?"
                         "\n<code>0</code> - –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                         "\n<code>1</code> - –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    await Form.next()


@dp.message_handler(state=Form.s_add_user_4)
async def f_add_user_4(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_sub'] = message.text
        if data['add_user_sub'] == "1":
            await message.answer("–î–æ –∫–∞–∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞? (–ø—Ä–∏–º–µ—Ä: <code>2022-09-01</code>)")
            await Form.next()
        elif data['add_user_sub'] == "0":
            data['add_user_sub_date'] = 0
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: "
                                 f"\n0 - ‚õî –ë–∞–Ω"
                                 f"\n1 - üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç"
                                 f"\n2 - üòé–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
                                 f"\n3 - üíÉ –°—Ç–∞—Ä–æ—Å—Ç–∞"
                                 f"\n4 - üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
            await Form.s_add_user_6.set()


@dp.message_handler(state=Form.s_add_user_5)
async def f_add_user_5(message: Message, state: FSMContext):
    async with state.proxy() as data:
        if data['add_user_sub'] == '1':
            data['add_user_sub_date'] = message.text
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: "
                                 f"\n0 - ‚õî –ë–∞–Ω"
                                 f"\n1 - üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç"
                                 f"\n2 - üòé–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
                                 f"\n3 - üíÉ –°—Ç–∞—Ä–æ—Å—Ç–∞"
                                 f"\n4 - üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")

        await Form.next()


@dp.message_handler(state=Form.s_add_user_6)
async def f_add_user_6(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_status'] = message.text
        markup = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add(InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'c_add_user_true {1}'))
        markup.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'c_add_user_true {0}'))
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
                             f"\n\n<b> ID:</b> {data['add_user_id']}"
                             f"\n<b> FIO:</b> {data['add_user_FIO']}"
                             f"\n<b> Course:</b> {data['add_user_course']}"
                             f"\n<b> Sub:</b> {int(data['add_user_sub'])}"
                             f"\n<b> Sub date:</b> {data['add_user_sub_date']}"
                             f"\n<b> Status:</b> {int(data['add_user_status'])}",
                             reply_markup=markup)


async def f_add_user_true(user_id, state: FSMContext):
    async with state.proxy() as data:
        conn = sqlite3.connect('db.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO users (user_id, username, FIO, course, sub, sub_date, status) '
                       'VALUES (?, ?, ?, ?, ?, ?, ?)',
                       (data['add_user_id'], None, data['add_user_FIO'], data['add_user_course'],
                        data['add_user_sub'], data['add_user_sub_date'],
                        data['add_user_status']))  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –±–¥
        conn.commit()
        await bot.send_message(user_id, '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!'
                                        f"\n\n<b> ID:</b> {data['add_user_id']}"
                                        f"\n<b> FIO:</b> {data['add_user_FIO']}"
                                        f"\n<b> Course:</b> {data['add_user_course']}"
                                        f"\n<b> Sub:</b> {data['add_user_sub']}"
                                        f"\n<b> Sub date:</b> {int(data['add_user_sub_date'])}"
                                        f"\n<b> Status:</b> {int(data['add_user_status'])}")
        conn.close()
    await state.reset_data()
    await state.finish()


async def f_starosta_main_page_1(user_id, username):
    user_status = await f_user_verify(user_id, username, ' ')
    if user_status == 3 or user_status >= 5:
        await f_starosta_main_page(user_status, user_id)


async def f_starosta_main_page(user_status, user_id):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    user_course = cursor.execute(f"SELECT course FROM users WHERE user_id='{user_id}'").fetchone()[0]
    students_course_kol = cursor.execute(f"SELECT COUNT(*) FROM users WHERE course = '{user_course}'").fetchone()[0]
    if user_status == 3 or user_status >= 5:
        key_starosta_main_page = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
        b_starosta_user_info = InlineKeyboardButton('‚¨á   ‚Äî‚Äî‚Äî –°—Ç—É–¥–µ–Ω—Ç—ã ‚Äî‚Äî‚Äî   ‚¨á', callback_data='pass')
        b_starosta_user_back = InlineKeyboardButton('‚¨á   ‚Äî‚Äî‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî‚Äî‚Äî    ‚¨á', callback_data='pass')
        b_back = InlineKeyboardButton('üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'c_back_to_menu')
        b_starosta_announcment = InlineKeyboardButton('‚ùó –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data=f'c_starosta {1}')
        b_starosta_poll = InlineKeyboardButton('üìä –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –≥—Ä—É–ø–ø—ã', callback_data=f'c_starosta {2}')
        b_starosta_search_user = InlineKeyboardButton('Ô∏èüîé –û—Ç–º–µ—Ç–∏—Ç—å (–Ω–µ —Å–¥–µ–ª–∞–Ω–æ)', callback_data=f'c_starosta {3}')
        b_starosta_add_user = InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å (–Ω–µ —Å–¥–µ–ª–∞–Ω–æ)', callback_data=f'c_starosta {4}')
        b_starosta_del_user = InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å (–Ω–µ —Å–¥–µ–ª–∞–Ω–æ)', callback_data=f'c_starosta {5}')
        # todo –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞ –¥–∑

        key_starosta_main_page.add(b_starosta_user_info)
        key_starosta_main_page.add(b_starosta_announcment, b_starosta_poll)
        key_starosta_main_page.add(b_starosta_search_user, b_starosta_add_user, b_starosta_del_user)
        key_starosta_main_page.add(b_starosta_user_back)
        key_starosta_main_page.add(b_back)

        await bot.send_message(user_id, "üíÉ <b>–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã</b> üíÉ"
                                        f"\n\n‚óæÔ∏è <b>–°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ:</b> <code>{str(students_course_kol)}</code>",
                               reply_markup=key_starosta_main_page)


async def f_starosta_main_page_2(user_id, reply):
    key_starosta = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
    b_starosta_cancel = InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data=f'c_starosta cancel')
    key_starosta.add(b_starosta_cancel)
    if reply == '1':  # –æ–±—å—è–≤–ª–µ–Ω–∏–µ
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', reply_markup=key_starosta)
        await Form.s_starosta_announcement.set()
    elif reply == '2':  # —Å–¥–µ–ª–∞—Ç—å –æ–ø—Ä–æ—Å –≥—Ä—É–ø–ø—ã
        await bot.send_message(user_id, '–ù–∞–∑–æ–≤–∏—Ç–µ –æ–ø—Ä–æ—Å')
        await Form.s_starosta_poll.set()
    elif reply == '3':  # –æ—Ç–º–µ—Ç–∏—Ç—å
        pass
    elif reply == '4':  # –¥–æ–±–∞–≤–∏—Ç—å
        pass
    elif reply == '5':  # —É–¥–∞–ª–∏—Ç—å
        pass


@dp.message_handler(state=Form.s_starosta_announcement)  # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
async def f_starosta_announcement(announcement: Message, state: FSMContext):
    user_id = announcement.from_user.id
    announcement = announcement.text
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    course = cursor.execute(f"SELECT course FROM users WHERE user_id='{user_id}'").fetchone()[0]
    spisok_polupokerov = [int(x) for x in cursor.execute(f"SELECT user_id FROM users WHERE (course='{course}') AND (status > 0)").fetchall()]
    for i in spisok_polupokerov:
        if i != user_id:
            await bot.send_message(i, f'‚ùó‚ùó‚ùó –°—Ç–∞—Ä–æ—Å—Ç–∞ –≤–µ—â–∞–µ—Ç ‚ùó‚ùó‚ùó\n\n{announcement}')
        else:
            await f_starosta_main_page(user_id, user_id)
            await bot.send_message(user_id, f'‚úÖ  –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.')
    # todo
    # —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É (–∑–∞–∫—Ä–µ–ø–∏—Ç—å?), –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–º–µ—Ç, —Ç–æ –±–æ—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    conn.close()
    await state.finish()


@dp.message_handler(state=Form.s_starosta_poll)  # –æ–ø—Ä–æ—Å
async def f_starosta_poll(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        key_poll = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
        b_poll_1 = InlineKeyboardButton('–ú–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, –∞–Ω–æ–Ω–∏–º–Ω—ã–π', callback_data=f'c_poll {1}')
        b_poll_2 = InlineKeyboardButton('–ú–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞', callback_data=f'c_poll {2}')
        b_poll_3 = InlineKeyboardButton('–ê–Ω–æ–Ω–∏–º–Ω—ã–π', callback_data=f'c_poll {3}')
        b_poll_4 = InlineKeyboardButton('–ü—Ä–æ—Å—Ç–æ –æ–ø—Ä–æ—Å', callback_data=f'c_poll {4}')
        key_poll.row(b_poll_1, b_poll_2)
        key_poll.row(b_poll_3, b_poll_4)
        data['name'] = poll.text
        await bot.send_message(poll.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –≤–∏–¥ –æ–ø—Ä–æ—Å–∞", reply_markup=key_poll)


async def f_starosta_poll_1(user_id):
    await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ 2-10')
    await Form.s_starosta_poll_2.set()


@dp.message_handler(state=Form.s_starosta_poll_2)
async def f_starosta_poll_2(poll: Message, state: FSMContext):
    user_id = poll.from_user.id
    try:
        c = int(poll.text)
        if (c < 11) and (c > 1):
            async with state.proxy() as data:
                data['integer'] = poll.text
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_1.set()
        else:
            await bot.send_message(user_id, f'–í –æ–ø—Ä–æ—Å–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 2-10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
            await Form.s_starosta_poll_1.set()
            await f_starosta_poll_1(poll.from_user.id)
    except:
        await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        await Form.s_starosta_poll_1.set()
        await f_starosta_poll_1(poll.from_user.id)


@dp.message_handler(state=Poll.poll_1)
async def f_poll_1(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        data['poll'] = f'''{poll.text}'''
        await bot.send_message(user_id, text='–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
        await Poll.poll_2.set()


@dp.message_handler(state=Poll.poll_2)
async def f_poll_2(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        if int(data['integer']) == 2:
            string = poll.text
            await Poll.poll_finish.set()
            await f_poll_finsh(string, dp.current_state(user=user_id))
        else:
            data['poll'] = f'''{data['poll']}@#$0192{poll.text}'''
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_3.set()


@dp.message_handler(state=Poll.poll_3)
async def f_poll_3(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        if int(data['integer']) == 3:
            string = poll.text
            await Poll.poll_finish.set()
            await f_poll_finsh(string, dp.current_state(user=user_id))
        else:
            data['poll'] = f'''{data['poll']}@#$0192{poll.text}'''
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_4.set()


@dp.message_handler(state=Poll.poll_4)
async def f_poll_4(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        if int(data['integer']) == 4:
            string = poll.text
            await Poll.poll_finish.set()
            await f_poll_finsh(string, dp.current_state(user=user_id))
        else:
            data['poll'] = f'''{data['poll']}@#$0192{poll.text}'''
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_5.set()


@dp.message_handler(state=Poll.poll_5)
async def f_poll_5(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        if int(data['integer']) == 5:
            string = poll.text
            await Poll.poll_finish.set()
            await f_poll_finsh(string, dp.current_state(user=user_id))
        else:
            data['poll'] = f'''{data['poll']}@#$0192{poll.text}'''
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_6.set()


@dp.message_handler(state=Poll.poll_6)
async def f_poll_6(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        if int(data['integer']) == 6:
            string = poll.text
            await Poll.poll_finish.set()
            await f_poll_finsh(string, dp.current_state(user=user_id))
        else:
            data['poll'] = f'''{data['poll']}@#$0192{poll.text}'''
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_7.set()


@dp.message_handler(state=Poll.poll_7)
async def f_poll_7(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        if int(data['integer']) == 7:
            string = poll.text
            await Poll.poll_finish.set()
            await f_poll_finsh(string, dp.current_state(user=user_id))
        else:
            data['poll'] = f'''{data['poll']}@#$0192{poll.text}'''
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_8.set()


@dp.message_handler(state=Poll.poll_8)
async def f_poll_8(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        if int(data['integer']) == 8:
            string = poll.text
            await Poll.poll_finish.set()
            await f_poll_finsh(string, dp.current_state(user=user_id))
        else:
            data['poll'] = f'''{data['poll']}@#$0192{poll.text}'''
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_9.set()


@dp.message_handler(state=Poll.poll_9)
async def f_poll_9(poll: Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = poll.from_user.id
        if int(data['integer']) == 9:
            string = poll.text
            await Poll.poll_finish.set()
            await f_poll_finsh(string, dp.current_state(user=user_id))
        else:
            data['poll'] = f'''{data['poll']}@#$0192{poll.text}'''
            await bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')
            await Poll.poll_10.set()


@dp.message_handler(state=Poll.poll_10)
async def f_poll_10(poll: Message, state: FSMContext):
        string = poll.text
        await Poll.poll_finish.set()
        await f_poll_finsh(string, dp.current_state(user=poll.from_user.id))


async def f_poll_finsh(string, state: FSMContext):
    async with state.proxy() as data:
        b_cancel = InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='c_cancel')
        data['poll'] = data['poll'] + '@#$0192' + string
        a = data['poll'].split('@#$0192')
        user_id = data['user_id']
        match int(data['reply']):
            case 1:
                mes = await bot.send_poll(user_id, data['name'], a, is_anonymous=True, allows_multiple_answers=True)
            case 2:
                mes = await bot.send_poll(user_id, data['name'], a, is_anonymous=False, allows_multiple_answers=True)
            case 3:
                mes = await bot.send_poll(user_id, data['name'], a, is_anonymous=True, allows_multiple_answers=False)
            case 4:
                mes = await bot.send_poll(user_id, data['name'], a, is_anonymous=False, allows_multiple_answers=False)
        mes_id = mes.message_id
        b_yes = InlineKeyboardButton('üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data=f'poll yes {mes_id}')
        b_no = InlineKeyboardButton('üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data=f'poll no {mes_id}')
        key_poll_finish = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
        key_poll_finish.add(b_yes, b_no)
        key_poll_finish.add(b_cancel)
        await bot.send_message(user_id, '‚úç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup=key_poll_finish)
        await state.reset_data()
        await state.finish()


# todo
# —ç—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
# @dp.message_handler(commands=['test'])
# async def test(message: Message):
#     conn = sqlite3.connect('db.db')
#     user_id = message.from_user.id
#     cursor = conn.cursor()
#     check = cursor.execute('SELECT groups FROM users WHERE user_id='{user_id}'").fetchone()[0]
#     check = check.split('/split.,&!/')
#     if '1' in check:
#         print('—É—Ä–∞, –æ–±—å–µ–∫—Ç –Ω–∞–π–¥–µ–Ω')
#     await bot.send_message(user_id, f'{check}')
#     conn.close()

@dp.message_handler(state=Form.s_starosta_note_1)
async def f_starosta_note_1(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–µ–π—á–∞—Å")
    # todo
    # –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫–∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–µ—Ä—É—Å—å –∫–∞–∫ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
    # –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö—Ä–µ–Ω—å, –∫–æ—Ç–æ—Ä–∞—è –¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Ç–∏–ø–æ –≤—Å–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
    # —Å—Ç–∞—Ä–æ—Å—Ç–µ –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ, –µ—Å–ª–∏ 2 –∏–ª–∏ –±–æ–ª—å—à–µ —á–µ–ª–æ–≤ —Å –æ–¥–Ω–æ–π —Ñ–∞–º–∏–ª–∏–µ–π, —Ç–æ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
    # –ø–æ—Ç–æ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ (–æ—Ç–º–µ–Ω–∏—Ç—å, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)
    # –≤ –±–¥ –∑–∞–Ω–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π, –∫—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    await Form.next()


@dp.message_handler(state=Form.s_starosta_note_2)
async def f_starosta_note_2(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['subject'] = message.text
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö")
        await Form.next()


@dp.message_handler(state=Form.s_starosta_note_3)
async def f_starosta_note_3(message: Message, state: FSMContext):
    # todo
    async with state.proxy() as data:
        print(data['subject'])


@dp.callback_query_handler(lambda call: True, state='*')
async def query_handler(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    username = call.from_user.username

    if call.data.startswith('c_main'):
        reply = call.data.split(' ')[1]
        if reply == 'timetable':
            await f_timetable_page(user_id)
        elif reply == 'homework':
            await f_homework_panel_main_0(user_id, username)
        elif reply == 'account':
            await f_account_page(user_id, username)
        elif reply == 'admin':
            await f_admin_panel_main(user_id, username)  # todo
        elif reply == 'starosta':
            await f_starosta_main_page_1(user_id, username)

    elif call.data == 'c_back_to_menu':
        await start_message_1(user_id)

    elif call.data.startswith('c_timetable_now'):
        user_status = await f_user_verify(user_id, username, ' ')
        if user_status != 0:
            day_id = call.data.split(' ')[1]
            course = call.data.split(' ')[2]
            start_time = d(2022, 8, 29)
            today = d.today()
            tomorrow = d.today() + timedelta(days=1)
            if (day_id == "1") or (day_id == "2"):
                if day_id == "2":
                    week_count = ((abs(tomorrow - start_time)).days // 7 + 1) % 2
                    await f_timetable_today(user_id, course, tomorrow, week_count)
                else:
                    week_count = ((abs(today - start_time)).days // 7 + 1) % 2
                    await f_timetable_today(user_id, course, today, week_count)
            else:
                if d.isoweekday(d.today()) == 7:
                    week_count = ((abs(tomorrow - start_time)).days // 7 + 1) % 2
                else:
                    week_count = ((abs(today - start_time)).days // 7 + 1) % 2
                await f_timetable_week(user_id, course, week_count)
        else:
            pass

    elif call.data == 'c_add_user':
        user_status = await f_user_verify(user_id, username, ' ')
        if user_status >= 5:
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ ID")
            await Form.s_add_user.set()
        else:
            pass

    elif call.data == 'c_add_homework':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç')
        await Form.s_add_homework_1.set()

    elif call.data == 'c_show_homework':
        await f_homework_page(user_id)

    elif call.data.startswith('c_reference'):  # –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∑
        reply = call.data.split(' ')[1]
        user_status = await get_user_status(user_id)
        if reply == 'next':
            page = 2
            await f_pagination(user_id, page, call.message.message_id)
        else:
            if user_status > 1:
                await f_homework_show(reply, user_id)

    elif call.data.startswith('c_pagination'):
        reply = call.data.split(' ')[1]
        if reply == 'back':
            page = int(call.data.split(' ')[2]) - 1
            await f_pagination(user_id, page, call.message.message_id)
        elif reply == 'next':
            page = int(call.data.split(' ')[2]) + 1
            await f_pagination(user_id, page, call.message.message_id)

    elif call.data.startswith('c_edit_homework_1'):  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∑
        id_of_homework = call.data.split(' ')[1]
        await f_homework_edit_1(id_of_homework, user_id)

    elif call.data == 'c_search_user':  # –ù–ï–î–û–î–ï–õ–ê–ù–û, –¢–£–¢ –ù–ê–î–ê –î–û–ë–ê–í–õ–ï–ù–ò–ï, –£–î–ê–õ–ï–ù–ò–ï –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í –ì–†–£–ü–ü–´
        #  todo
        pass

    elif call.data == 'c_next':
        await bot.send_message(call.message.chat.id, text=f'—Ç—ã –¥—É—Ä–∞–∫ :)\n\n–¥–æ–±–∞–≤—å —Å—é–¥–∞ —á—Ç–æ-—Ç–æ (–∫–æ–ª–±–µ–∫ _next)')

    elif call.data.startswith('c_poll'):
        reply = call.data.split(' ')[1]
        async with state.proxy() as data:
            data['reply'] = reply
            data['user_id'] = user_id
            await Form.s_starosta_poll_1.set()
            await f_starosta_poll_1(user_id)

    elif call.data.startswith('poll'):
        reply = call.data.split(' ')[1]
        if reply == 'yes':
            message_id = int(call.data.split(' ')[2])
            conn = sqlite3.connect('db.db')
            cursor = conn.cursor()
            course = cursor.execute(f"SELECT course FROM users WHERE user_id='{user_id}'").fetchone()[0]
            spisok_polupokerov = [int(x[0]) for x in cursor.execute(f"SELECT user_id FROM users WHERE course='{course}'").fetchall()]
            k = 0
            for i in spisok_polupokerov:
                if i != user_id:
                    try:
                        await bot.forward_message(i, user_id, message_id, protect_content=True)
                        k += 1
                    except:
                        pass
            await bot.send_message(call.from_user.id, f'–£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {k} –ª—é–¥—è–º')
            conn.close()
        elif reply == 'no':
            key_starosta = InlineKeyboardMarkup(resize_keyboard=True, selective=True)
            b_starosta_cancel = InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data=f'c_starosta cancel')
            key_starosta.add(b_starosta_cancel)
            await bot.send_message(user_id, '–ù–∞–∑–æ–≤–∏—Ç–µ –æ–ø—Ä–æ—Å', reply_markup=key_starosta)
            await Form.s_starosta_poll.set()

    elif call.data == 'c_cancel':
        await dp.current_state(user=user_id).reset_data()
        await dp.current_state(user=user_id).finish()
        await start_message_1(user_id)

    elif call.data.startswith('c_starosta'):
        reply = call.data.split(' ')[1]
        user_status = await f_user_verify(user_id, username, ' ')
        if user_status >= 3:
            if reply == 'cancel':
                await dp.current_state(user=user_id).reset_data()
                await dp.current_state(user=user_id).finish()
                await bot.answer_callback_query(call.id, '–û—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', show_alert=False)
                await f_starosta_main_page(user_status, user_id)
            else:
                await f_starosta_main_page_2(user_id, reply)

    elif call.data.startswith('c_add_user_true'):
        user_id = call.from_user.id
        dati = call.data.split(' ')[1]
        if dati == '0':
            await dp.current_state(user=user_id).reset_data()
            await dp.current_state(user=user_id).finish()
            await bot.answer_callback_query(call.id, '–û—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', show_alert=False)
        else:
            await f_add_user_true(user_id, dp.current_state(user=user_id))

    elif call.data == 'c_user_setting':
        await bot.answer_callback_query(call.id, '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
        await start_message_1(user_id)

    elif call.data == 'c_user_delete':
        await f_user_delete_true(user_id)

    elif call.data.startswith('c_user_delete_true'):
        reply = call.data.split(' ')[1]
        if reply == '1':
            await bot.answer_callback_query(call.id, '–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ')
            conn = sqlite3.connect('db.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute(f'DELETE FROM users WHERE user_id={user_id}')
            conn.commit()
            conn.close()
        else:
            await start_message_1(user_id)

    await f_delete_this_message(call.message)

# –ê —ç—Ç–∞ –¥–≤–∏–∂—É—Ö–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –Ω–µ –¥–∞–µ—Ç –±–æ—Ç—É —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–µ –≤ —á–∞—Ç –∞—Ä—Ö–∏–≤–∞
while True:
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as errors_logging:
        bot.send_message(config.archive_chat_id, "‚ÄºÔ∏è–û–®–ò–ë–ö–ê‚ÄºÔ∏è" +
                         "\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: " + str(errors_logging))
        print(errors_logging)
        pass
