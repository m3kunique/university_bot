import logging
import fake_useragent
import time
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
import requests
import config
from bs4 import BeautifulSoup as bs
import datetime
from datetime import date as d
import sqlite3
import traceback

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.token, parse_mode='html')

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

l_sub_status = {0: "‚õî Not active",
                1: "‚úÖ Active!"}

l_user_status = {0: "‚õî –ë–∞–Ω",
                 1: "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç",
                 2: "üòé –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π",
                 3: "üíÉ –°—Ç–∞—Ä–æ—Å—Ç–∞",
                 4: "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
                 5: "üßë‚Äçüíª –†–∞–∑—Ä–∞–±",
                 6: "ü§¥ –ë–æ–≥", }

l_kniga_emoji = {0: "üìï",
                 1: "üìí",
                 2: "üìó",
                 3: "üìò",
                 4: "üìô",
                 5: "üìî"}


class Form(StatesGroup):
    s_start = State()
    s_username = State()
    s_password = State()
    user_id = State()
    user_name = State()
    s_add_user = State()
    s_add_user_2 = State()
    s_add_user_3 = State()
    s_add_user_4 = State()
    s_add_user_5 = State()
    s_add_user_6 = State()
    s_add_user_true = State()
    s_add_homework_1 = State()
    s_starosta_note_1 = State()
    s_starosta_note_2 = State()
    s_starosta_note_3 = State()


async def f_delete_this_message(message):
    await bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–µ


async def get_user_status(message):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    user_status = cursor.execute("SELECT status FROM users WHERE user_id=?", (message.from_user.id,)).fetchone()[0]
    conn.close()
    return user_status



async def f_user_verify(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id=?", (user_id,))  # –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –∑–∞–ø–∏—Å–∏
    rez = cursor.fetchall()  # –ø—Ä–∏–≤–æ–¥ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥ –∑–∞–ø–∏—Å–µ–π
    if not rez:  # –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ
        await bot.send_message(user_id, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞')
        await Form.s_username.set()
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: " + str(user_name) + " || " + str(user_id))
        old_user_name = cursor.execute("SELECT username FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
        fresh_user_name = user_name
        if old_user_name != fresh_user_name:
            await bot.send_message(config.archive_chat_id, f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Å–º–µ–Ω–∏–ª —é–∑–µ—Ä–Ω–µ–π–º!"
                                                           f"\n‚ö†Ô∏è –ë—ã–ª @{old_user_name} —Å—Ç–∞–ª @{fresh_user_name}")
            cursor.execute('UPDATE users SET username = ? WHERE user_id = ?', (fresh_user_name, user_id))
            conn.commit()
        user_status = cursor.execute("SELECT status FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
        if user_status == 0:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω ‚õîÔ∏è!")
        else:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω ‚úÖÔ∏è!")
            if message.text == '/start':
                await start_message_1(message)
            return user_status
    conn.close()


@dp.message_handler(state=Form.s_username)
async def f_username(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['username'] = message.text
    await Form.next()
    await message.reply(f"<b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</b>")


@dp.message_handler(state=Form.s_password)
async def f_password(message: types.Message, state: FSMContext):
    async with state.proxy() as datas:
        ans = await bot.send_message(chat_id=message.chat.id, text='–ó–∞–≥—Ä—É–∑–∫–∞...')
        password = message.text
        url = 'https://lks.bmstu.ru/portal3/login?back=https://lks.bmstu.ru/portfolio'
        data = {
            'username': datas['username'],
            'password': password,
            '_eventId': 'submit'
        }
        s = requests.Session()
        r = s.get(url)
        execution = r.text.split('<input type="hidden" name="execution" value="')[1].split('"/>')[0]
        data["execution"] = execution
        url = 'https://proxy.bmstu.ru:8443/cas/login?service=https%3A%2F%2Fproxy.bmstu.ru%3A8443%2Fcas%2Foauth2.0%2FcallbackAuthorize%3Fclient_name%3DCasOAuthClient%26client_id%3DEU'
        fake_user = fake_useragent.UserAgent().chrome
        headers = {
            'user-agent': fake_user
        }
        a = s.post(url, data=data, headers=headers)
        r = bs(a.text, 'lxml')
        try:
            name = [i for i in r.find(class_='card-title').text.split(' ') if i != '']
            name = [line.rstrip() for line in name]
            name = f'{name[0]} {name[1]} {name[2]}'
            info = r.find_all(class_='card-subtitle')
            # DOB = info[1].text
            # education_level = info[2].text
            course = info[3].text
            # –∑–∞–Ω–æ—Å–∏–º –≤—Å–µ –≤ –±–¥
            conn = sqlite3.connect('db.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('INSERT INTO users (user_id, username, FIO, course, sub, sub_date, status) '
                           'VALUES (?, ?, ?, ?, ?, ?, ?)',
                           (message.from_user.id, message.from_user.username, name, course,
                            0, None, 1))
            await bot.edit_message_text(text='üèÖ  –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã  üèÖ',message_id=ans.message_id, chat_id=message.chat.id)
            conn.commit()
            conn.close()
            await start_message_1(message)
        except Exception as E:
            print(traceback.print_exc())
            await bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            await state.reset_data()
            await f_user_verify(message)
            await state.finish()


@dp.message_handler(commands=['getmyid'])
async def getmyidbroshka(message):
    await message.answer(f"–¢–≤–æ–π –∞–π–¥–∏: {message.from_user.id}")


@dp.message_handler(commands=['start'])
async def start_message(message: types.Message, state: FSMContext):
    await f_user_verify(message)


async def start_message_1(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    user_status = await get_user_status(message)
    if user_status == 0:  # –µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞–±–∞–Ω–µ–Ω —Ç–æ
        await message.answer(f'‚õîÔ∏è –í–´ –ó–ê–ë–ê–ù–ï–ù–´'
                             f'\n\n   –ù—É –∞ –µ—Å–ª–∏ –≤—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä–æ—Å—Ç–µ –≥—Ä—É–ø–ø—ã')
    elif user_status >= 1:  # –µ—Å–ª–∏ –Ω–µ –≤ –±–∞–Ω–µ
        cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
        info = cursor.fetchone()
        FIO = info[3]
        course = info[4]
        sub = info[5]
        sub_date = info[6]
        rez = cursor.execute("SELECT course FROM courses WHERE course=?", (course,)).fetchall()
        if not rez:
            cursor.execute(f'''INSERT INTO courses (course) VALUES ('{course}')''')
            conn.commit()
        key_start_message = types.InlineKeyboardMarkup()  # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        b_timetable_today = types.InlineKeyboardButton('üìÜüü† –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data=f'c_timetable_now {1} {course}')
        b_timetable_tomorrow = types.InlineKeyboardButton('üìÜüü¢ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data=f'c_timetable_now {2} {course}')
        b_timetable_week = types.InlineKeyboardButton('üìÜüü£ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data=f'c_timetable_now {3} {course}')
        b_setting = types.InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–µ –≤–æ—Ä–∫)', callback_data='c_user_setting')
        """
        –í—ã—à–µ —Ç—ã –æ–±—ä—è–≤–ª—è–µ—à—å –∫–Ω–æ–ø–∫–∏, –≥–¥–µ —É–∫–∞–∑—ã–≤–∞–µ—à—å –∏–º—è –∫–Ω–æ–ø–∫–∏ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ) –∏ –∫–∞–ª–±–µ–∫ –¥–∞—Ç—É –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        –û–Ω –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –∫–æ–¥–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º

        –ß—Ç–æ –±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –µ–µ —á–µ—Ä–µ–∑ reply_markup = –∏–º—è_–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Å—Ç—Ä–æ–∫–∞ 112)
        """
        key_start_message.row(b_timetable_today, b_timetable_tomorrow)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        key_start_message.row(b_timetable_week)
        key_start_message.row(b_setting)
        if user_status != 0:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}"
                                 f"\n\n–ü–æ–¥–ø–∏—Å–∫–∞: <b>{l_sub_status.get(sub)}</b>"
                                 f"\n–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{sub_date}</b>"
                                 f"\n-----------------"
                                 f"\nüíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ üíé"
                                 f"\n<b>üÜî ID:</b> <code>{user_id}</code>"
                                 f"\n<b>üìù –§–ò–û:</b> <code>{FIO}</code>"
                                 f"\n<b>üë• –ö—É—Ä—Å:</b> <code>{course}</code>"
                                 f"\n<b>üß† –°—Ç–∞—Ç—É—Å:</b> <code>{l_user_status.get(user_status)}</code>",
                                 reply_markup=key_start_message)
        else:
            await message.answer("‚õîÔ∏è <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>")
        conn.close()


@dp.message_handler(commands=['f'])
async def test(message):
    await message.answer(f"–°–µ–≥–æ–¥–Ω—è: {d.today()}\n"
                         f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {d.isoweekday(d.today())}")


# –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –∫–Ω–æ–ø–∫–∞ —Å –¥–∑
# –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –±–¥ –∏ –∫–Ω–æ–ø–∫–∞ —Å –¥–∑
async def f_timetable_week(message: types.Message, course, week_count):  # –ø–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
    url = 'https://lks.bmstu.ru/schedule/list'
    b = bs(requests.get(url).text, 'lxml').find_all('a', class_="btn btn-primary text-nowrap")
    status = 0
    for i in b:
        if i.get_text(strip=True) == course:
            status = 1
            url = 'https://lks.bmstu.ru/' + i.get('href')
            b = bs(requests.get(url).text, 'lxml').find_all('div', class_='col-md-6 hidden-xs')
            string_build = "\n"
            for l, n in enumerate(b, start=1):
                if l >= 2:
                    string_build += f'‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n'
                string_build += f'''üóì    {n.find('strong').text}    üóì\n\n\n'''
                y = n.find_all('tr')
                for i, j in enumerate(y, start=1):
                    if i >= 3:
                        a = j.find('span')
                        if (a is not None) and (week_count == 0):
                            if (a.find_parent('td', class_='text-info')) or (a.find_parent('td', colspan='2')):
                                string_build += f"""üï∞  {j.find('td', class_='bg-grey text-nowrap').text}\n{a.text}\n\n"""
                        if (a is not None) and (week_count == 1):
                            if (a.find_parent('td', class_='text-success')) or (a.find_parent('td', colspan='2')):
                                string_build += f"""üï∞  {j.find('td', class_='bg-grey text-nowrap').text}\n{a.text}\n\n"""
            await message.answer(f"{string_build}")
            break

    if status == 0:
        await message.answer(('\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.'
                              '\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å—Ç–∞—Ç—É—Å–µ)'))


@dp.message_handler(commands=['homework'])
async def f_homework_panel_main_1(message: types.Message):
    await f_homework_panel_main(message)


async def f_homework_panel_main(message: types.Message):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT status FROM users WHERE user_id=?", (user_id,))  # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –±–¥
    user_status = cursor.fetchone()[0]
    cursor.execute("SELECT course FROM users WHERE user_id=?", (user_id,))  # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
    course = cursor.fetchone()[0]
    homework_kol = cursor.execute("SELECT COUNT(*) FROM homework WHERE course=?", (course,)).fetchone()[0]
    if user_status >= 2:
        key_homework_panel = types.InlineKeyboardMarkup()
        b_add_homework = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data='c_add_homework')
        b_edit_homework = types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ', callback_data='c_edit_homework')
        key_homework_panel.add(b_add_homework)
        key_homework_panel.add(b_edit_homework)
        await message.answer("üìîÔ∏è   --- <b>–ü–ê–ù–ï–õ–¨ –î–û–ú–ê–®–ö–ò</b> ---   üìîÔ∏è" +
                             f"\n–î–æ–º–∞—à–∫–∏ –≤ –±–æ—Ç–µ: {str(homework_kol)}", reply_markup=key_homework_panel)
    else:
        await bot.send_message(message.chat.id, text='–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥—ã')
    conn.close()


async def f_homework_edit(user_id, chat_id):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT course FROM users WHERE user_id=?", (user_id,))  # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
    course = cursor.fetchone()[0]
    cursor.execute("SELECT class FROM homework WHERE course=?", (course,))  # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    names_all = cursor.fetchall()
    names = []
    for i in range(len(names_all)):
        if names_all[i][0] not in names:
            names.append(names_all[i][0])

    key_list_panel = types.InlineKeyboardMarkup()
    for i in range(len(names)):
        if i <= 5:
            key_list_panel.add(types.InlineKeyboardButton(f'{names[i]}', callback_data=f'c_reference {names[i]}'))
        else:
            break
    if len(names) > 5:
        key_list_panel.add(types.InlineKeyboardButton(f'–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∑', callback_data='c_next'))
    await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–µ—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
                           reply_markup=key_list_panel)
    conn.close()


async def f_homework_edit_1(homework, user_id, chat_id):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT course FROM users WHERE user_id=?", (user_id,))  # –ø–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
    course = cursor.fetchone()[0]
    cursor.execute(
        f"SELECT text FROM homework WHERE (course LIKE '%{course}%') AND (class LIKE '%{homework}%')  ")  # —Ç–µ–∫—Å—Ç –¥–∑
    text_all = cursor.fetchall()
    date_of_creation = cursor.execute(
        f"SELECT date_of_creation FROM homework WHERE (course LIKE '%{course}%') AND (class LIKE '%{homework}%')").fetchone()
    for i in range(len(text_all)):
        id_of_homework = cursor.execute(
            f"SELECT id FROM homework WHERE (course LIKE '%{course}%') AND (text LIKE '%{text_all[i][0]}%')").fetchone()
        await bot.send_message(chat_id, text=f'\n\n –ó–∞–¥–∞–Ω–∏–µ –ø–æ {homework} –æ—Ç {date_of_creation[0]}\n\n{text_all[i][0]}',
                               reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                                                                                        callback_data=f'c_edit_homework_1 {id_of_homework[0]}')))
    conn.close()


async def f_homework_edit_2(id_of_homework, user_id, chat_id):
    await bot.send_message(chat_id, f'{id_of_homework[0]}')


@dp.message_handler(state='s_add_homework_1')  # –Ω–∞–¥–æ –¥–æ–¥–µ–ª–∞—Ç—å
async def homework_step_1(message: types.Message, state: FSMContext):
    with state.proxy() as data:
        data['class'] = message.text


async def f_timetable_today(message: types.Message, course, day_id, today, week_count):
    if day_id == '1':
        today = d.isoweekday(today)
    else:
        today = d.isoweekday(today) + 1
    url = 'https://lks.bmstu.ru/schedule/list'
    b = bs(requests.get(url).text, 'lxml').find_all('a', class_="btn btn-primary text-nowrap")
    status = 0
    for i in b:
        if i.get_text(strip=True) == course:
            status = 1
            url = 'https://lks.bmstu.ru/' + i.get('href')
            match today:
                case 1:
                    today = '–ü–ù'
                case 2:
                    today = '–í–¢'
                case 3:
                    today = '–°–†'
                case 4:
                    today = '–ß–¢'
                case 5:
                    today = '–ü–¢'
                case 6:
                    today = '–°–ë'
                case 7:
                    break
            b = bs(requests.get(url).text, 'lxml').find(string=today).find_parent('table').find_all('tr')
            string_build = f"üóì    {today}    üóì\n\n"
            for i, j in enumerate(b, start=1):
                if i >= 3:
                    a = j.find('span')
                    if (a is not None) and (week_count == 0):
                        if (a.find_parent('td', class_='text-info')) or (a.find_parent('td', colspan='2')):
                            string_build += f"""üï∞  {j.find('td', class_='bg-grey text-nowrap').text}\n{a.text}\n\n"""
                    elif (a is not None) and (week_count == 1):
                        if (a.find_parent('td', class_='text-success')) or (a.find_parent('td', colspan='2')):
                            string_build += f"""üï∞  {j.find('td', class_='bg-grey text-nowrap').text}\n{a.text}\n\n"""
            await message.answer(f"{string_build}")
            break
    if status == 0:
        await message.answer(('\n\n–ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å—Ç–∞—Ç—É—Å–µ)'))


@dp.message_handler(commands=['admin'])
async def f_admin_panel_main_1(message: types.Message):
    await f_admin_panel_main(message)  # —è —Å–¥–µ–ª–∞–ª —ç—Ç–æ –∑–∞—Ä–∞–Ω–µ–µ, —Ç–∞–∫ –Ω–∞–¥–æ, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —Å–ø—Ä–æ—Å–∏—à—å


async def f_admin_panel_main(message: types.Message):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    user_id = message.from_user.id
    cursor.execute("SELECT status FROM users WHERE user_id=?", (user_id,))  # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –±–¥
    user_status = cursor.fetchone()[0]
    user_kol = cursor.execute("SELECT COUNT(*) FROM users").fetchone()[0]
    key_admin_panel = types.InlineKeyboardMarkup()
    b_search_user = types.InlineKeyboardButton('–ü–æ–∏—Å–∫ —é–∑–µ—Ä–æ–≤', callback_data='c_search_users')
    b_add_user = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞', callback_data='c_add_user')
    key_admin_panel.add(b_search_user)
    key_admin_panel.add(b_add_user)
    if user_status >= 5:
        await message.answer("‚öúÔ∏è--- <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê</b> ---‚öúÔ∏è" +
                             f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {str(user_kol)}", reply_markup=key_admin_panel)
    conn.close()


@dp.message_handler(state=Form.s_add_user)
async def f_add_user(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_id'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
    await Form.next()


@dp.message_handler(state=Form.s_add_user_2)
async def f_add_user_2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_FIO'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å (–≥—Ä—É–ø–ø—É (–ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ))")
    await Form.next()


@dp.message_handler(state=Form.s_add_user_3)
async def f_add_user_3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_course'] = message.text.upper()
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞?"
                         "\n<code>0</code> - –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                         "\n<code>1</code> - –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    await Form.next()


@dp.message_handler(state=Form.s_add_user_4)
async def f_add_user_4(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_sub'] = message.text
        if data['add_user_sub'] == "1":
            await message.answer("–î–æ –∫–∞–∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞? (–ø—Ä–∏–º–µ—Ä: <code>2022-09-01</code>)")
            await Form.next()
        elif data['add_user_sub'] == "0":
            data['add_user_sub_date'] = 0
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: "
                                 f"\n0 - ‚õî –ë–∞–Ω"
                                 f"\n1 - üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç"
                                 f"\n2 - üòé–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
                                 f"\n3 - üíÉ –°—Ç–∞—Ä–æ—Å—Ç–∞"
                                 f"\n4 - üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
            await Form.s_add_user_6.set()


@dp.message_handler(state=Form.s_add_user_5)
async def f_add_user_5(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data['add_user_sub'] == '1':
            data['add_user_sub_date'] = message.text
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å: "
                                 f"\n0 - ‚õî –ë–∞–Ω"
                                 f"\n1 - üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç"
                                 f"\n2 - üòé–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
                                 f"\n3 - üíÉ –°—Ç–∞—Ä–æ—Å—Ç–∞"
                                 f"\n4 - üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")

        await Form.next()


@dp.message_handler(state=Form.s_add_user_6)
async def f_add_user_6(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['add_user_status'] = message.text
        markup = types.InlineKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add(types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'c_add_user_true {1}'))
        markup.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'c_add_user_true {0}'))
        await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
                             f"\n\n<b> ID:</b> {data['add_user_id']}"
                             f"\n<b> FIO:</b> {data['add_user_FIO']}"
                             f"\n<b> Course:</b> {data['add_user_course']}"
                             f"\n<b> Sub:</b> {int(data['add_user_sub'])}"
                             f"\n<b> Sub date:</b> {data['add_user_sub_date']}"
                             f"\n<b> Status:</b> {int(data['add_user_status'])}",
                             reply_markup=markup)


async def f_add_user_true(dati, chat_id, state: FSMContext):
    async with state.proxy() as data:
        if dati == '0':
            await bot.send_message(chat_id, '–û—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
        else:
            conn = sqlite3.connect('db.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('INSERT INTO users (user_id, username, FIO, course, sub, sub_date, status) '
                           'VALUES (?, ?, ?, ?, ?, ?, ?)',
                           (data['add_user_id'], None, data['add_user_FIO'], data['add_user_course'],
                            data['add_user_sub'], data['add_user_sub_date'],
                            data['add_user_status']))  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –±–¥
            conn.commit()
            await bot.send_message(chat_id, '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!'
                                            f"\n\n<b> ID:</b> {data['add_user_id']}"
                                            f"\n<b> FIO:</b> {data['add_user_FIO']}"
                                            f"\n<b> Course:</b> {data['add_user_course']}"
                                            f"\n<b> Sub:</b> {data['add_user_sub']}"
                                            f"\n<b> Sub date:</b> {int(data['add_user_sub_date'])}"
                                            f"\n<b> Status:</b> {int(data['add_user_status'])}")
            conn.close()
    await state.finish()


@dp.message_handler(commands=['starosta'])
async def f_starosta_main_page_1(message: types.Message):
    await f_starosta_main_page(message, message.from_user.id)


async def f_starosta_main_page(message, user_id):
    conn = sqlite3.connect('db.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("SELECT status FROM users WHERE user_id=?", (user_id,))
    user_status = cursor.fetchone()[0]
    user_course = cursor.execute("SELECT course FROM users WHERE user_id=?", (user_id,)).fetchone()[0]
    students_course_kol = cursor.execute(f"SELECT COUNT(*) FROM users WHERE course = '{user_course}'").fetchone()[0]
    if user_status == 3 or user_status >= 5:
        key_starosta_main_page = types.InlineKeyboardMarkup()
        b_starosta_user_info = types.InlineKeyboardButton('‚¨áÔ∏è ---–°—Ç—É–¥–µ–Ω—Ç—ã--- ‚¨áÔ∏è', callback_data='pass')
        b_starosta_search_user = types.InlineKeyboardButton('Ô∏èüîé –û—Ç–º–µ—Ç–∏—Ç—å (–¥–µ–ª–∞—é)', callback_data=f'c_starosta {1}')
        b_starosta_add_user = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å (–¥–µ–ª–∞—é)', callback_data=f'c_starosta {2}')
        b_starosta_del_user = types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å (–¥–µ–ª–∞—é)', callback_data=f'c_starosta {3}')
        # —Å—é–¥–∞ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö

        key_starosta_main_page.add(b_starosta_user_info)
        key_starosta_main_page.add(b_starosta_search_user, b_starosta_add_user, b_starosta_del_user)
        await message.answer("üíÉ <b>–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ä–æ—Å—Ç—ã</b> üíÉ"
                             f"\n\n‚óæÔ∏è <b>–°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ:</b> <code>{str(students_course_kol)}</code>",
                             reply_markup=key_starosta_main_page)


async def f_starosta_main_page_2(message: types.Message, reply):
    if reply == '1':  # –æ—Ç–º–µ—Ç–∏—Ç—å
        await Form.s_starosta_note_1.set()
    elif reply == '2':  # –¥–æ–±–∞–≤–∏—Ç—å
        pass
    elif reply == '3':  # —É–¥–∞–ª–∏—Ç—å
        pass


@dp.message_handler(state=Form.s_starosta_note_1)
async def f_starosta_note_1(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–µ–π—á–∞—Å")
    # todo
    # –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫–∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–∞–∑–±–µ—Ä—É—Å—å –∫–∞–∫ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤—ã—á–ª–µ–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, —á—Ç–æ–±—ã –±–¥ –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —Ö–ª–∞–º–æ–º
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    await Form.next()


@dp.message_handler(state=Form.s_starosta_note_2)
async def f_starosta_note_2(message: types.Message, state: FSMContext):
    with state.proxy() as data:
        data['subject'] = message.text
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö")
        await Form.next()


@dp.message_handler(state=Form.s_starosta_note_3)
async def f_starosta_note_3(message: types.Message, state: FSMContext):
    # todo
    with state.proxy() as data:
        print(data['subject'])


@dp.callback_query_handler(lambda call: True, state='*')
async def query_handler(query: types.CallbackQuery):
    if query.data.startswith('c_timetable_now'):
        user_status = await f_user_verify(query.message)
        if user_status != 0:
            day_id = query.data.split(' ')[1]
            course = query.data.split(' ')[2]
            start_time = d(2022, 8, 29)
            today = d.today()
            week_count = ((abs(today - start_time)).days // 7 + 1) % 2
            if (day_id == "1") or (day_id == "2"):
                await f_timetable_today(query.message, course, day_id, today, week_count)
            else:
                await f_timetable_week(query.message, course, week_count)
            await f_delete_this_message(query.message)
        else:
            pass

    elif query.data == 'c_add_user':
        user_status = await f_user_verify(query.message)
        if user_status >= 5:
            await f_delete_this_message(query.message)
            await query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID")
            await Form.s_add_user.set()
        else:
            pass

    elif query.data == 'c_add_homework':
        await query.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç')
        await f_delete_this_message(query.message)
        await Form.s_add_homework_1.set()

    elif query.data == 'c_edit_homework':

        await f_delete_this_message(query.message)
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        await f_homework_edit(user_id, chat_id)

    elif query.data.startswith('c_reference'):  # –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∑
        await f_delete_this_message(query.message)
        homework = query.data.split(' ')[1]
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        await f_homework_edit_1(homework, user_id, chat_id)

    elif query.data.startswith('c_edit_homework_1'):  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∑
        user_id = query.from_user.id
        chat_id = query.message.chat.id
        await f_delete_this_message(query.message)
        id_of_homework = query.data.split(' ')[1]
        await f_homework_edit_2(id_of_homework, user_id, chat_id)

    elif query.data == 'c_search_user':  # –ù–ï–î–û–î–ï–õ–ê–ù–û, –¢–£–¢ –ù–ê–î–ê –î–û–ë–ê–í–õ–ï–ù–ò–ï, –£–î–ê–õ–ï–ù–ò–ï –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í –ì–†–£–ü–ü–´
        #  todo
        pass

    elif query.data == 'c_next':
        await bot.send_message(query.message.chat.id, text=f'—Ç—ã –¥—É—Ä–∞–∫ :)\n\n–¥–æ–±–∞–≤—å —Å—é–¥–∞ —á—Ç–æ-—Ç–æ (–∫–æ–ª–±–µ–∫ _next)')

    elif query.data.startswith('c_starosta'):
        reply = query.data.split(' ')[1]
        # todo –¥–æ—Å—Ç–∞–≤—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ –±–¥
        user_status = await f_user_verify(query.message)
        if user_status >= 3:
            await f_delete_this_message(query.message)
            await f_starosta_main_page_2(query.message, reply)

    elif query.data.startswith('c_add_user_true'):
        chat_id = query.message.chat.id
        user_id = query.from_user.id
        await f_delete_this_message(query.message)
        dati = query.data.split(' ')[1]
        await f_add_user_true(dati, chat_id, dp.current_state(user=user_id))


    elif query.data == 'c_user_setting':
        await f_delete_this_message(query.message)


# –ê —ç—Ç–∞ –¥–≤–∏–∂—É—Ö–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏ –Ω–µ –¥–∞–µ—Ç –±–æ—Ç—É —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–µ –≤ —á–∞—Ç –∞—Ä—Ö–∏–≤–∞
while True:
    try:
        executor.start_polling(dp, skip_updates=True)
    except Exception as errors_logging:
        bot.send_message(config.archive_chat_id, "‚ÄºÔ∏è–û–®–ò–ë–ö–ê‚ÄºÔ∏è" +
                         "\n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: " + str(errors_logging))
        print(errors_logging)
        pass
